{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nconst axios = require('axios');\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState: {\n    todoList: [],\n    oneTodo: {\n      id: 0,\n      status: 'pending',\n      description: '',\n      dueDate: '',\n      createdAt: '',\n      updatedAt: ''\n    }\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    addItemToList: (state, action) => {\n      state.oneTodo = action.payload;\n    },\n    getTodoList: (state, action) => {\n      state.todoList = action.payload;\n    },\n    setTodoStatus: (state, action) => {\n      state.status = action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  addItemToList,\n  getTodoList,\n  setTodoStatus\n} = todoSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\nexport const addNewTodo = content => async dispatch => {\n  try {\n    const response = await axios({\n      method: 'post',\n      url: 'https://todo-baxk.herokuapp.com/todos/add',\n      data: content\n    });\n    dispatch(addItemToList(response));\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getAllTodos = _ => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios({\n      method: 'get',\n      url: 'https://todo-baxk.herokuapp.com/todos'\n    });\n    dispatch(getTodoList(data.data));\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const toggleTodoStatus = (id, status) => async dispatch => {\n  console.log(\"------->\", status, id);\n\n  try {\n    const {\n      data\n    } = await axios({\n      method: 'put',\n      url: `https://todo-baxk.herokuapp.com/todos/${id}`,\n      data: {\n        status: \"completed\"\n      }\n    });\n    dispatch(setTodoStatus(data.data));\n  } catch (error) {\n    console.error(error);\n  }\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectCount = state => state.todo.value;\nexport const selectAllTodos = state => state.todo.todoList;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/kasule/Desktop/todo-web/src/Todo/todoSlice.js"],"names":["createSlice","axios","require","todoSlice","name","initialState","todoList","oneTodo","id","status","description","dueDate","createdAt","updatedAt","reducers","increment","state","value","decrement","incrementByAmount","action","payload","addItemToList","getTodoList","setTodoStatus","actions","incrementAsync","amount","dispatch","setTimeout","addNewTodo","content","response","method","url","data","console","log","error","getAllTodos","_","toggleTodoStatus","selectCount","todo","selectAllTodos","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nconst axios = require('axios');\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState: {\r\n    todoList: [],\r\n    oneTodo: {\r\n      id: 0,\r\n      status: 'pending',\r\n      description: '',\r\n      dueDate: '',\r\n      createdAt: '',\r\n      updatedAt: ''\r\n    }\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n    addItemToList: (state, action) => {\r\n      state.oneTodo = action.payload;\r\n    },\r\n    getTodoList: (state, action) => {\r\n      state.todoList = action.payload;\r\n    },\r\n    setTodoStatus: (state, action) => {\r\n      state.status = action.payload\r\n    }\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount, addItemToList, getTodoList, setTodoStatus } = todoSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n\r\nexport const addNewTodo = content => async (dispatch) => {\r\n  try {\r\n    const response = await axios({\r\n      method: 'post',\r\n      url: 'https://todo-baxk.herokuapp.com/todos/add',\r\n      data: content\r\n    });\r\n    dispatch(addItemToList(response))\r\n    console.log(response);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n\r\nexport const getAllTodos = _ => async (dispatch) => {\r\n  try {\r\n    const { data } = await axios({\r\n      method: 'get',\r\n      url: 'https://todo-baxk.herokuapp.com/todos'\r\n    });\r\n    \r\n    dispatch(getTodoList(data.data))\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport const toggleTodoStatus = (id, status) => async (dispatch) => {\r\n  console.log(\"------->\", status, id);\r\n\r\n  try {\r\n    const { data }  = await axios({\r\n      method: 'put',\r\n      url: `https://todo-baxk.herokuapp.com/todos/${id}`,\r\n      data: {status: \"completed\"}\r\n    });\r\n    dispatch(setTodoStatus(data.data))\r\n    \r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n}\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.todo.value;\r\n\r\nexport const selectAllTodos = state => state.todo.todoList;\r\n\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}