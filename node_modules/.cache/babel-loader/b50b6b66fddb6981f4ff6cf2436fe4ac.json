{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nconst axios = require('axios');\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n    todoList: [],\n    oneTodo: {\n      id: 0\n    }\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    addItemToList: (state, action) => {\n      state.oneTodo = action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  addItemToList\n} = counterSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\nexport const addNewTodo = content => async dispatch => {\n  try {\n    const response = await axios({\n      method: 'post',\n      data: content\n    });\n    dispatch(addItemToList(content));\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/kasule/Desktop/todo-web/src/AddTodo/counterSlice.js"],"names":["createSlice","axios","require","counterSlice","name","initialState","value","todoList","oneTodo","id","reducers","increment","state","decrement","incrementByAmount","action","payload","addItemToList","actions","incrementAsync","amount","dispatch","setTimeout","addNewTodo","content","response","method","data","console","log","error","selectCount","counter","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;AACtCI,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CADK;AAEZC,IAAAA,QAAQ,EAAE,EAFE;AAGZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE;AADG;AAHG,GAFwB;AAStCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAEC,KAAK,IAAI;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACN,KAAN,IAAe,CAAf;AACD,KAPO;AAQRO,IAAAA,SAAS,EAAED,KAAK,IAAI;AAClBA,MAAAA,KAAK,CAACN,KAAN,IAAe,CAAf;AACD,KAVO;AAWRQ,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACN,KAAN,IAAeS,MAAM,CAACC,OAAtB;AACD,KAbO;AAcRC,IAAAA,aAAa,EAAE,CAACL,KAAD,EAAQG,MAAR,KAAmB;AAChCH,MAAAA,KAAK,CAACJ,OAAN,GAAgBO,MAAM,CAACC,OAAvB;AACD;AAhBO;AAT4B,CAAD,CAAhC;AA6BP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA,iBAAxB;AAA2CG,EAAAA;AAA3C,IAA6Dd,YAAY,CAACe,OAAhF,C,CAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGC,MAAM,IAAIC,QAAQ,IAAI;AAClDC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,QAAQ,CAACP,iBAAiB,CAACM,MAAD,CAAlB,CAAR;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM;AAOP,OAAO,MAAMG,UAAU,GAAGC,OAAO,IAAI,MAAOH,QAAP,IAAoB;AACvD,MAAI;AACF,UAAMI,QAAQ,GAAG,MAAMxB,KAAK,CAAC;AAC3ByB,MAAAA,MAAM,EAAE,MADmB;AAG3BC,MAAAA,IAAI,EAAEH;AAHqB,KAAD,CAA5B;AAOAH,IAAAA,QAAQ,CAACJ,aAAa,CAACO,OAAD,CAAd,CAAR;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD,GAVD,CAUE,OAAOK,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD;AACF,CAdM,C,CAkBP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGnB,KAAK,IAAIA,KAAK,CAACoB,OAAN,CAAc1B,KAA3C;AAEP,eAAeH,YAAY,CAAC8B,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nconst axios = require('axios');\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n    todoList: [],\r\n    oneTodo: {\r\n      id: 0\r\n    }\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n    addItemToList: (state, action) => {\r\n      state.oneTodo = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount, addItemToList } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n\r\nexport const addNewTodo = content => async (dispatch) => {\r\n  try {\r\n    const response = await axios({\r\n      method: 'post',\r\n      \r\n      data: content\r\n\r\n\r\n    });\r\n    dispatch(addItemToList(content))\r\n    console.log(response);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}